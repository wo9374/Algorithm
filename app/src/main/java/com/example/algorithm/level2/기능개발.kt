package com.example.algorithm.level2

import java.lang.Math.ceil

/**
 * 문제 설명
프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

제한 사항
작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
작업 진도는 100 미만의 자연수입니다.
작업 속도는 100 이하의 자연수입니다.
배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.

입출력 예
progresses	                    speeds	        return
[93, 30, 55]	            [1, 30, 5]	        [2, 1]
[95, 90, 99, 99, 80, 99]	[1, 1, 1, 1, 1, 1]	[1, 3, 2]

입출력 예 설명
입출력 예 #1
첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

입출력 예 #2
모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.

따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.

 * */

class 기능개발 {
    fun solution(progresses: IntArray, speeds: IntArray): IntArray {
        val available = progresses.mapIndexed { index, already ->
            Math.ceil((100-already).toDouble().div(speeds.get(index)))
            // 각 작업의 완성까지 며칠이 소요될지 계산
            // (100 - 93) / 1     = 7
            // (100 - 30) / 30    = 2.3    //Math.ceil로 소수점 올림 = 3
            // (100 - 55) / 5     = 9

            //available = [7,3,9]
        }
        val answer = arrayListOf<Int>()
        var deploy = available.first()     //배포 순서를 지켜야하므로 첫번째 배포는 첫번째 작업이 완료된 날  =7
        var count = 0

        available.forEach {

            //현재 배포 예정일 시점에 작업이 완료된 상태인지 확인하고
            // 아직 덜 끝난 작업을 만나면 배포일을 해당 날짜로 갱신한 후 현재 배포일까지의 작업 개수를 배열에 넣음
            if(deploy < it) {
                deploy = it      //배포순서 일자 바꾸기
                answer.add(count)
                count =0         //count reset
            }
            count ++
        }

        answer.add(count) // 남아있는 작업들 배열에 넣음 = 1

        //[2,1]
        return answer.toIntArray()
    }
}

// mapIndexed()는 컬랙션에 포함된 인자의 인덱스 값을 변환하여 사용

// first()함수는 컬랙션내에 첫번째 아이템을 반환